//
//  UserTodoListViewController.swift
//  VIP
//
//  Created by Mohamed El-Taweel on 9/2/20.
//  Copyright (c) 2020 Learning. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import KRProgressHUD


protocol UserTodoListDisplayLogic: class
{
    func showLoading()
    func showError(with message: String)
    func showTodos(with viewModels: [UserTodoCellViewModel])
}

class UserTodoListViewController: UIViewController
{
    
    @IBOutlet weak var userTodoTableView: UITableView!
    
    var userTodosViewModels = [UserTodoCellViewModel]()
    var interactor: UserTodoListBusinessLogic?
    var router: (NSObjectProtocol & UserTodoListRoutingLogic & UserTodoListDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = UserTodoListInteractor()
        let presenter = UserTodoListPresenter()
        let router = UserTodoListRouter()
        let worker = GetAPIUserTodoListWorker()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        interactor.worker = worker
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: View lifecycle
    override func viewDidLoad()
    {
        super.viewDidLoad()
        interactor?.getUserTodos()
    }

}

extension UserTodoListViewController: UITableViewDelegate,UITableViewDataSource{
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return userTodosViewModels.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: UserTodoTableViewCell.IDENTIFIER, for: indexPath) as! UserTodoTableViewCell
        cell.config(with: userTodosViewModels[indexPath.row])
        return cell
    }
    
    func tableView(_ tableView: UITableView, willDisplay cell: UITableViewCell, forRowAt indexPath: IndexPath) {
        cell.alpha = 0
        UIView.animate(
            withDuration: 0.5,
            delay: 0.05 * Double(indexPath.row),
            animations: {
                cell.alpha = 1
        })
    }
}

extension UserTodoListViewController: UserTodoListDisplayLogic{
    func showLoading() {
        KRProgressHUD.show()
    }
    
    func showError(with message: String) {
        KRProgressHUD.showError(withMessage: message)
    }
    
    func showTodos(with viewModels: [UserTodoCellViewModel]) {
        userTodosViewModels = viewModels
        userTodoTableView.reloadData()
        KRProgressHUD.dismiss()
    }
    
    
}
